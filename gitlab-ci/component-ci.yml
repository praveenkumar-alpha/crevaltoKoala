image: python:alpine

before_script:
  - apk add --no-cache build-base
  - pip3 install -r ./requirements.txt  # Install project requirements

stages:
  - build
  - test
  - test_deploy
  - deploy
  - production

##################################################
##                 Build jobs                   ##
##################################################
.package:
  stage: build
  image: python:latest
  before_script:
    - pip3 install -r ./requirements.txt setuptools wheel # Install project requirements
    - apt update -yqq && apt install gettext -yqq  # Install system requirements
    - find . -name \*.po -execdir sh -c 'msgfmt "$0" -o `basename $0 .po`.mo' '{}' \;  # Compile translations
  script:
    - echo "No action in script. Override if you wish."
  after_script:
    - python3 setup.py sdist bdist_wheel
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_REF_NAME
    paths:
      - dist

package:
  extends: .package

pages:
  stage: build
  script:
    - apk add make
    - pip3 install -r ./docs/requirements.txt
    - make -C docs html
  after_script:
    - mv docs/build/html/ public/
  artifacts:
    paths:
      - public
    expire_in: "5 min"
  only:
    - master
    - tags

##################################################
##                  Test jobs                   ##
##################################################

# Run jobs except on master, tag or for merge requests
# to the master branch
.except-to-master: &except-to-master
  except:
    refs:
      - master
      - tags
    variables:
      - $CI_COMMIT_REF_NAME == "master"
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"

# Run jobs only on master, tag or for merge requests
# to the master branch
.only-to-master: &only-to-master
  only:
    refs:
      - tags
      - master
      - merge_requests
    variables:
      - $CI_COMMIT_REF_NAME == "master"
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"

#######################
## The syntax linter ##
#######################
.syntax-linter:
  stage: test
  script:
    - pip3 install prospector
    - prospector -i "${PKG_NAME}"/demo

syntax-linter:
  extends: .syntax-linter
  allow_failure: true
  <<: *except-to-master

syntax-linter:strict:
  extends: .syntax-linter
  <<: *only-to-master

#########################
## The security linter ##
#########################
.security-linter:
  stage: test
  script:
    - pip3 install bandit
    - bandit -r "${PKG_NAME}" -x "*/tests/*","*/demo/*"


security-linter:
  extends: .security-linter
  allow_failure: true
  <<: *except-to-master

security-linter:strict:
  extends: .security-linter
  <<: *only-to-master

################
## Unit tests ##
################
tests:
  stage: test
  script:
    - pip install coverage
    - cd "${PKG_NAME}"/demo && coverage run manage.py test "${PKG_NAME}"
    - coverage report

##################################################
##             Test deploy jobs                 ##
##################################################
.pypi:
  image: alpine
  dependencies:
    - package
  variables:
    GIT_STRATEGY: none
    TWINE_USERNAME: $TEST_PYPI_USERNAME
    TWINE_PASSWORD: $TEST_PYPI_PASSWORD
  before_script:
    - apk add --no-cache python3
    - pip3 install twine
  only:
    - tags

pypi:test:
  stage: test_deploy
  extends: .pypi
  script:
    - twine upload --repository-url https://test.pypi.org/legacy/ dist/*

##################################################
##                 Deploy jobs                  ##
##################################################
pypi:
  stage: deploy
  extends: .pypi
  script:
    - twine upload dist/*

##################################################
##               Production jobs                ##
##################################################
deploy_demo:
  image: alpine
  stage: production
  variables:
    GIT_STRATEGY: none
  before_script:
    - apk add --no-cache curl
  script:
    - curl -X POST -F token="${DEPLOY_LMS_TOKEN}" -F ref=develop https://gitlab.com/api/v4/projects/11707844/trigger/pipeline
  only:
    - develop
